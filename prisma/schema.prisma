// OneFoodDialer - Comprehensive Subscription Management System
// Database Schema for subscription-based food business management

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE USER MANAGEMENT
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  profile UserProfile?

  // Business relationships
  businessOwner Business[] @relation("BusinessOwner")
  businessStaff BusinessStaff[]

  // Customer relationships
  customerProfile Customer?
  orders          Order[]
  subscriptions   Subscription[]
  walletTransactions WalletTransaction[]
  invoices        Invoice[]
  supportTickets  SupportTicket[]

  @@map("users")
}

model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  address     Json?   // Flexible address structure
  preferences Json?   // User preferences

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

enum UserRole {
  SUPER_ADMIN
  BUSINESS_OWNER
  KITCHEN_MANAGER
  STAFF
  CUSTOMER
}

// ============================================================================
// BUSINESS & KITCHEN MANAGEMENT
// ============================================================================

model Business {
  id          String        @id @default(cuid())
  name        String
  description String?
  logo        String?
  website     String?
  phone       String?
  email       String?
  address     Json?
  settings    Json?         // Business-specific settings
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  ownerId     String
  owner       User          @relation("BusinessOwner", fields: [ownerId], references: [id])

  kitchens    Kitchen[]
  staff       BusinessStaff[]
  customers   Customer[]
  subscriptions Subscription[]
  orders      Order[]
  menuItems   MenuItem[]
  plans       SubscriptionPlan[]
  invoices    Invoice[]
  metrics     BusinessMetrics[]

  @@map("businesses")
}

model Kitchen {
  id          String   @id @default(cuid())
  name        String
  address     Json
  phone       String?
  capacity    Int      @default(100)
  isActive    Boolean  @default(true)
  operatingHours Json? // Operating hours structure
  deliveryZones  Json? // Delivery zone definitions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  staff       KitchenStaff[]
  inventory   InventoryItem[]
  orders      Order[]
  subscriptions Subscription[]

  @@map("kitchens")
}

model BusinessStaff {
  id         String     @id @default(cuid())
  role       StaffRole
  permissions Json?     // Role-based permissions
  isActive   Boolean    @default(true)
  joinedAt   DateTime   @default(now())

  // Relationships
  userId     String
  businessId String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  business   Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)

  kitchenStaff KitchenStaff[]

  @@unique([userId, businessId])
  @@map("business_staff")
}

model KitchenStaff {
  id         String   @id @default(cuid())
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())

  // Relationships
  staffId    String
  kitchenId  String
  staff      BusinessStaff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  kitchen    Kitchen       @relation(fields: [kitchenId], references: [id], onDelete: Cascade)

  @@unique([staffId, kitchenId])
  @@map("kitchen_staff")
}

enum StaffRole {
  MANAGER
  CHEF
  DELIVERY
  SUPPORT
  ACCOUNTANT
}

// ============================================================================
// CUSTOMER MANAGEMENT
// ============================================================================

model Customer {
  id              String   @id @default(cuid())
  customerCode    String   @unique // Auto-generated customer code
  preferences     Json?    // Dietary preferences, delivery preferences
  loyaltyPoints   Int      @default(0)
  walletBalance   Decimal  @default(0) @db.Decimal(10, 2)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  userId          String   @unique
  businessId      String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  subscriptions   Subscription[]
  orders          Order[]
  walletTransactions WalletTransaction[]
  feedbacks       CustomerFeedback[]
  invoices        Invoice[]

  @@map("customers")
}

model CustomerFeedback {
  id         String   @id @default(cuid())
  rating     Int      // 1-5 rating
  comment    String?
  category   FeedbackCategory
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relationships
  customerId String
  orderId    String?
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  order      Order?   @relation(fields: [orderId], references: [id])

  @@map("customer_feedback")
}

enum FeedbackCategory {
  FOOD_QUALITY
  DELIVERY
  SERVICE
  PRICING
  OTHER
}

// ============================================================================
// MENU & SUBSCRIPTION PLANS
// ============================================================================

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(8, 2)
  category    String
  isVegetarian Boolean @default(false)
  isVegan     Boolean @default(false)
  allergens   String[] // Array of allergen information
  nutritionInfo Json?  // Nutritional information
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  orderItems  OrderItem[]
  planItems   SubscriptionPlanItem[]
  inventory   InventoryItem[]

  @@map("menu_items")
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        PlanType
  duration    Int      // Duration in days
  price       Decimal  @db.Decimal(8, 2)
  discount    Decimal? @db.Decimal(5, 2) // Percentage discount
  maxOrders   Int?     // Max orders per plan period
  features    Json?    // Plan features
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  planItems   SubscriptionPlanItem[]
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model SubscriptionPlanItem {
  id         String @id @default(cuid())
  quantity   Int    @default(1)
  isOptional Boolean @default(false)

  // Relationships
  planId     String
  menuItemId String
  plan       SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  menuItem   MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@unique([planId, menuItemId])
  @@map("subscription_plan_items")
}

enum PlanType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

// ============================================================================
// SUBSCRIPTION MANAGEMENT
// ============================================================================

model Subscription {
  id            String            @id @default(cuid())
  status        SubscriptionStatus @default(ACTIVE)
  startDate     DateTime
  endDate       DateTime?
  nextBillingDate DateTime?
  autoRenew     Boolean           @default(true)
  customizations Json?            // Custom preferences for this subscription
  deliveryAddress Json?           // Specific delivery address
  deliveryInstructions String?
  pausedUntil   DateTime?         // Temporary pause
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relationships
  customerId    String
  businessId    String
  planId        String
  kitchenId     String?           // Assigned kitchen
  userId        String            // For direct user reference

  customer      Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  business      Business          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  plan          SubscriptionPlan  @relation(fields: [planId], references: [id])
  kitchen       Kitchen?          @relation(fields: [kitchenId], references: [id])
  user          User              @relation(fields: [userId], references: [id])

  orders        Order[]
  invoices      Invoice[]

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  PENDING
}

// ============================================================================
// ORDER MANAGEMENT
// ============================================================================

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique // Auto-generated order number
  type            OrderType   @default(SUBSCRIPTION)
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  discountAmount  Decimal?    @db.Decimal(8, 2)
  taxAmount       Decimal?    @db.Decimal(8, 2)
  deliveryFee     Decimal?    @db.Decimal(6, 2)
  finalAmount     Decimal     @db.Decimal(10, 2)

  scheduledFor    DateTime    // When the order should be delivered
  deliveryAddress Json
  deliveryInstructions String?
  specialRequests String?

  preparedAt      DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relationships
  customerId      String
  businessId      String
  kitchenId       String
  subscriptionId  String?     // Null for one-time orders
  userId          String      // For direct user reference

  customer        Customer     @relation(fields: [customerId], references: [id])
  business        Business     @relation(fields: [businessId], references: [id])
  kitchen         Kitchen      @relation(fields: [kitchenId], references: [id])
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  orderItems      OrderItem[]
  feedback        CustomerFeedback[]
  invoice         Invoice?

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  quantity   Int     @default(1)
  unitPrice  Decimal @db.Decimal(8, 2)
  totalPrice Decimal @db.Decimal(8, 2)
  customizations Json? // Item-specific customizations

  // Relationships
  orderId    String
  menuItemId String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

enum OrderType {
  SUBSCRIPTION
  BULK
  ONE_TIME
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

// ============================================================================
// INVENTORY MANAGEMENT
// ============================================================================

model InventoryItem {
  id            String   @id @default(cuid())
  name          String
  category      String
  unit          String   // kg, liters, pieces, etc.
  currentStock  Decimal  @db.Decimal(10, 3)
  minStock      Decimal  @db.Decimal(10, 3)
  maxStock      Decimal  @db.Decimal(10, 3)
  unitCost      Decimal  @db.Decimal(8, 2)
  supplier      String?
  expiryDate    DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  kitchenId     String
  menuItemId    String?  // Optional link to menu item
  kitchen       Kitchen  @relation(fields: [kitchenId], references: [id], onDelete: Cascade)
  menuItem      MenuItem? @relation(fields: [menuItemId], references: [id])

  stockMovements StockMovement[]

  @@map("inventory_items")
}

model StockMovement {
  id          String        @id @default(cuid())
  type        MovementType
  quantity    Decimal       @db.Decimal(10, 3)
  reason      String?
  reference   String?       // Reference to order, purchase, etc.
  createdAt   DateTime      @default(now())

  // Relationships
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  EXPIRED
}

// ============================================================================
// BILLING & PAYMENT SYSTEM
// ============================================================================

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  status          InvoiceStatus @default(PENDING)
  subtotal        Decimal       @db.Decimal(10, 2)
  taxAmount       Decimal       @db.Decimal(8, 2)
  discountAmount  Decimal?      @db.Decimal(8, 2)
  totalAmount     Decimal       @db.Decimal(10, 2)

  dueDate         DateTime
  paidAt          DateTime?
  paymentMethod   String?
  paymentReference String?

  gstNumber       String?
  billingAddress  Json

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  customerId      String
  businessId      String
  subscriptionId  String?
  orderId         String?       @unique
  userId          String

  customer        Customer      @relation(fields: [customerId], references: [id])
  business        Business      @relation(fields: [businessId], references: [id])
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  order           Order?        @relation(fields: [orderId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

// ============================================================================
// WALLET SYSTEM
// ============================================================================

model WalletTransaction {
  id            String            @id @default(cuid())
  type          TransactionType
  amount        Decimal           @db.Decimal(10, 2)
  description   String
  reference     String?           // Reference to order, invoice, etc.
  status        TransactionStatus @default(COMPLETED)
  balanceAfter  Decimal           @db.Decimal(10, 2)
  createdAt     DateTime          @default(now())

  // Relationships
  customerId    String
  userId        String
  customer      Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id])

  @@map("wallet_transactions")
}

enum TransactionType {
  CREDIT
  DEBIT
  REFUND
  CASHBACK
  BONUS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// ============================================================================
// SUPPORT SYSTEM
// ============================================================================

model SupportTicket {
  id          String        @id @default(cuid())
  ticketNumber String       @unique
  subject     String
  description String
  priority    TicketPriority @default(MEDIUM)
  status      TicketStatus  @default(OPEN)
  category    String
  resolution  String?
  resolvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  userId      String
  assignedTo  String?
  user        User          @relation(fields: [userId], references: [id])

  @@map("support_tickets")
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

model BusinessMetrics {
  id              String   @id @default(cuid())
  date            DateTime @db.Date
  totalOrders     Int      @default(0)
  totalRevenue    Decimal  @db.Decimal(12, 2) @default(0)
  newCustomers    Int      @default(0)
  activeSubscriptions Int  @default(0)
  averageOrderValue Decimal @db.Decimal(8, 2) @default(0)
  customerRetentionRate Decimal @db.Decimal(5, 2) @default(0)

  // Kitchen-specific metrics
  kitchenUtilization Decimal @db.Decimal(5, 2) @default(0)
  deliveryOnTime     Decimal @db.Decimal(5, 2) @default(0)

  createdAt       DateTime @default(now())

  // Relationships
  businessId      String
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@map("business_metrics")
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
