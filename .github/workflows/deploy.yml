name: Deploy OneFoodDialer

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint:check

      - name: Check formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:ci
        env:
          # Provide minimal environment for tests
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" ]; then
            echo "‚ùå NEXT_PUBLIC_SUPABASE_URL secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" ]; then
            echo "‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "‚ùå DATABASE_URL secret is not set"
            exit 1
          fi
          echo "‚úÖ All required secrets are configured"

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: build-files
          path: .next/

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Vercel secrets
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "‚ùå VERCEL_TOKEN secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "‚ùå VERCEL_ORG_ID secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "‚ùå VERCEL_PROJECT_ID secret is not set"
            exit 1
          fi
          echo "‚úÖ All Vercel secrets are configured"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT
          echo "‚úÖ Preview deployed to: $url"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        if: success()
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployment ready!\n\n**Preview URL:** ${{ steps.deploy.outputs.preview_url }}\n\n‚úÖ Build completed successfully`
            })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    outputs:
      production_url: ${{ steps.deploy.outputs.production_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Vercel secrets
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "‚ùå VERCEL_TOKEN secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "‚ùå VERCEL_ORG_ID secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "‚ùå VERCEL_PROJECT_ID secret is not set"
            exit 1
          fi
          echo "‚úÖ All Vercel secrets are configured"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT
          echo "‚úÖ Production deployed to: $url"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run health check
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
          echo "üîç Running health check..."
          curl -f ${{ steps.deploy.outputs.production_url }}/api/health || exit 1
          echo "‚úÖ Health check passed"

      - name: Check Sentry configuration
        id: sentry-check
        run: |
          if [ -n "${{ secrets.SENTRY_AUTH_TOKEN }}" ]; then
            echo "sentry_configured=true" >> $GITHUB_OUTPUT
          else
            echo "sentry_configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify Sentry of deployment
        uses: getsentry/action-release@v1
        if: ${{ success() && steps.sentry-check.outputs.sentry_configured == 'true' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: github.event_name == 'pull_request' && needs.deploy-preview.outputs.preview_url != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Validate preview URL
        run: |
          if [ -z "${{ needs.deploy-preview.outputs.preview_url }}" ]; then
            echo "‚ùå Preview URL is not available"
            exit 1
          fi
          echo "‚úÖ Running E2E tests against: ${{ needs.deploy-preview.outputs.preview_url }}"

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-preview.outputs.preview_url }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
